
package com.first.fhsemit.recycle;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.RobotDrive;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	
	RobotDrive drive;
	Hooks hooks;
	DigitalInput ramButton;
	int autonomousState;
	
	
    public void robotInit() {
    	
    	CANTalon frontLeft = new CANTalon(0);//TODO cfg
    	CANTalon backLeft = new CANTalon(1);//TODO cfg
    	CANTalon backRight = new CANTalon(2);//TODO cfg
    	CANTalon frontRight = new CANTalon(3);//TODO cfg
    	drive = new RobotDrive(frontLeft, backLeft, frontRight, backRight);
    	
    	hooks = new Hooks(0,1);//TODO cfg
    	
    	autonomousState = 0;
    }

    public void autonomousInit(){
    	
    }
    
    public void autonomousPeriodic() {
    	drive.mecanumDrive_Cartesian(0.5F, 0, 0, 0);
    	drive.mecanumDrive_Cartesian(0, 0.5F, 0, 0);
    	
    	switch(autonomousState){
		case 0://move to first object
			if(!ramButton.get()){
				drive.mecanumDrive_Cartesian(0.5F, 0, 0, 0);
			}else{
				autonomousState++;
			}
			break;
		case 1://pick up first object
			
			break;
		case 2://move to second object
			if(!ramButton.get()){
				drive.mecanumDrive_Cartesian(0.5F, 0, 0, 0);
			}else{
				autonomousState++;
			}
			break;
		case 3://pick up second object
			break;
    	
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        
    }
    
    @Override
    public void testInit(){
    	
    }
    
    /**
     * This function is called periodically during test mode
     */
    @Override
    public void testPeriodic() {
    
    }
    
}
