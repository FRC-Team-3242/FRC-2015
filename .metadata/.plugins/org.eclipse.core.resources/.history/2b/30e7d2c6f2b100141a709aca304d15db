
package com.first.fhsemit.recycle;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
import edu.wpi.first.wpilibj.Timer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	
	Preferences pref;
	
	private double strafeSpeed;
	private double turnSpeed;
	private double forwardSpeed;
	
	Joystick controller;
	RobotDrive drive;
	Hooks hooks;
	Tilter tilter;
	//DigitalInput ramButton;
	RangeFinder rangeFinder;
	int conveyorState;
	int autonomousState;
	Timer autonomousTimer;
	Gyro baseGyro;
	
    public void robotInit() {
    	controller = new Joystick(1);
    	
    	//negative is forward, and positive is backwards for Y
    	//positive is clockwise and negative is counterclockwise for turning
    	//drive motors are backwards
    	CANTalon frontLeft = new CANTalon(4);
    	CANTalon backLeft = new CANTalon(3);
    	CANTalon backRight = new CANTalon(2);
    	CANTalon frontRight = new CANTalon(1);
    	drive = new RobotDrive(frontLeft, backLeft, frontRight, backRight);
    	drive.setInvertedMotor(MotorType.kFrontRight, true);
    	drive.setInvertedMotor(MotorType.kRearRight, true);
    	
    	hooks = new Hooks(0,1,new DigitalInput(1),new DigitalInput(2));//TODO cfg
    	tilter = new Tilter(new Relay(1),new AnalogInput(4));//TODO cfg
    	
    	//rangeFinder = new RangeFinder(new AnalogInput(2));//TODO cfg
    	
    	//baseGyro = new Gyro(1);
    	autonomousTimer = new Timer();
    	autonomousTimer.start();
    	
    	pref = Preferences.getInstance();
    	loadPrefs();
    }
    
    
    private void loadPrefs(){
    	hooks.expo = pref.getBoolean("expo",false);
    	hooks.sensitivity = pref.getDouble("HookSpeed",0.5);
    	strafeSpeed = pref.getDouble("StrafeSpeed",0.2);//0.13;
    	turnSpeed = pref.getDouble("TurnSpeed",0.8);//0.25;
    	forwardSpeed = pref.getDouble("ForwardSpeed",-1);//0.4;
    }

    
    @Override
    public void teleopInit(){
    	conveyorState = 0;
    	loadPrefs();
    }

    @Override
    public void teleopPeriodic() {
    	//manualConveyor();
    	autoConveyor();
        teleopDrive();
    }
    
    
    private void manualConveyor(){
    	//manual conveyor control
    	hooks.move(controller.getRawAxis(5));//TODO cfg
    	
    	//manual tilter control
    	tilter.move(controller);
    }
    
    private void autoConveyor(){
    	
    //hallEffect is true when a magnet is not present, and false when a magnet is present
    	
    	switch(conveyorState){
    	case 0://wait for button
    		
    		manualConveyor();
    		
    		if(controller.getRawButton(6))//go up one section
    			conveyorState++;
    		if(controller.getRawButton(5))//go down one section
    			conveyorState = 2;
    		break;
    		
    	//go up one section
    	case 1:
    		if(hooks.upOne()){
    			conveyorState = 0;
    		}
    		break;
    		
    	//go down one section
    	case 2:
    		if(hooks.downOne()){
    			conveyorState = 0;
    		}
    		break;
    		
    	}
    }
    
    private void teleopDrive(){
    	double analogX = turnSpeed*filteredAxis(controller.getRawAxis(0));
    	double analogY = forwardSpeed*filteredAxis(controller.getRawAxis(1));
    	
    	double strafe = 0;
    	if(controller.getRawButton(2)) strafe += strafeSpeed;//move right
    	if(controller.getRawButton(3)) strafe -= strafeSpeed;//move left
    	
    	drive.mecanumDrive_Cartesian(strafe, analogY, analogX, 0);//TODO cfg
    }
    
    /**
     * filters out small values
     */
    private double filteredAxis(double value){
    	if(value < 0.07 && value > -0.07) value = 0; //TODO cfg
    	return value;
    }
    

    public void autonomousInit(){
    	autonomousState = 1;
    }
    
    public void autonomousPeriodic() {
    	
    	switch(autonomousState){
		case 0://move to first object
			if(!rangeFinder.isInRange()){
				drive.mecanumDrive_Cartesian(0, -0.35F, 0, 0);//TODO cfg
			}else{
				autonomousState++;
				drive.stopMotor();
			}
			break;//TODO 
		case 1://pick up first object
			if(hooks.upOne()){//TODO cfg
				autonomousState++;
				
			}
			break;
		case 2://move to second object
			//if(!rangeFinder.isInRange()){
			if(this.autonomousTimer.hasPeriodPassed(0.3)){
				drive.mecanumDrive_Cartesian(0, -0.3F, 0, 0);
			}else{
				autonomousState++;
				drive.stopMotor();
			}
			break;
		case 3://pick up second object
			if(hooks.upOne()){
				autonomousState++;
			}
			break;
		case 4://turn towards autozone
			if(baseGyro.getAngle() > -90){
				drive.mecanumDrive_Cartesian(0, 0, -0.4, 0);//TODO cfg
			}else{
				drive.mecanumDrive_Cartesian(0, 0, 0.003, 0);//stop
				autonomousState++;
				autonomousTimer.reset();
			}
			break;
		case 5://move to autoZone
			if(!autonomousTimer.hasPeriodPassed(0.9)){//TODO cfg
				drive.mecanumDrive_Cartesian(0, -0.7, 0, 0);//TODO cfg
			}else{
				autonomousState++;
				drive.stopMotor();
			}
			break;
		case 6://drop crate
			if(hooks.downOne()){
				autonomousState++;
			}
			break;
		case 7://drop can
			if(hooks.downOne()){
				autonomousState++;
			}
			break;
		case 8://move away from crate and can
			if(!autonomousTimer.hasPeriodPassed(0.6)){//TODO cfg
				drive.mecanumDrive_Cartesian(0, 0.3, 0, 0);//TODO cfg
			}else{
				autonomousState = Integer.MAX_VALUE;
				drive.stopMotor();
			}
			break;
    	}
    }
    
    @Deprecated
    private void oldAutonomousPeriodic(){
    	//TODO put old code here
    }
    
    
    
    @Override
    public void testInit(){
    	//LiveWindow.setEnabled(true); //TODO determine if necessary
    	
    	
    }
    
    @Override
    public void testPeriodic() {
    	
    }
    
}
