
package com.first.fhsemit.recycle;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	
	private final double strafeSpeed = 0.2;
	private final double turnSpeed = 0.6;
	private final double ySpeed = 0.7;
	
	Joystick controller;
	RobotDrive drive;
	Hooks hooks;
	Tilter tilter;
	DigitalInput hallEffect;
	DigitalInput ramButton;
	int conveyorState;
	int autonomousState;
	Timer timer;
	Gyro baseGyro;
	
    public void robotInit() {
    	controller = new Joystick(1);
    	
    	CANTalon frontLeft = new CANTalon(4);//TODO cfg
    	CANTalon backLeft = new CANTalon(3);//TODO cfg
    	CANTalon backRight = new CANTalon(2);//TODO cfg
    	CANTalon frontRight = new CANTalon(1);//TODO cfg
    	drive = new RobotDrive(frontLeft, backLeft, frontRight, backRight);
    	
    	drive.setInvertedMotor(MotorType.kFrontRight, true);
    	drive.setInvertedMotor(MotorType.kRearRight, true);
    	
    	hallEffect = new DigitalInput(1);
    	ramButton = new DigitalInput(0);//TODO replace with range finder
    	
    	hooks = new Hooks(0,1,new DigitalInput(1));//TODO cfg
    	tilter = new Tilter(new Relay(2),1);//TODO cfg
    	
    	
    	
    	baseGyro = new Gyro(0);
    	timer = new Timer();
    	
    }
    
    
    

    
    @Override
    public void teleopInit(){
    	conveyorState = 0;
    }

    @Override
    public void teleopPeriodic() {
    	//manualConveyor();
    	
    	autoConveyor();
        teleopDrive();
    }
    
    private void manualConveyor(){
    	//manual conveyor control
    	hooks.move(controller.getRawAxis(5));//TODO cfg
    	
    	//manual tilter control
    	//tilter.move(controller);
    }
    
    private void autoConveyor(){
    	
    //hallEffect is true when a magnet is not present, and false when a magnet is present
    	
    	switch(conveyorState){
    	case 0://wait for button
    		
    		manualConveyor();
    		
    		if(controller.getRawButton(5))//go up one section
    			conveyorState++;
    		if(controller.getRawButton(4))//go down one section
    			conveyorState = 2;
    		break;
    		
    	//go up one section
    	case 1:
    		if(hooks.upOne()){
    			conveyorState = 0;
    		}
    		break;
    		
    	//go down one section
    	case 2://determine if hooks are already at a magnet
    		if(hooks.downOne()){
    			conveyorState = 0;
    		}
    		break;
    		
    	}
    }
    
    private void teleopDrive(){
    	double analogX = turnSpeed*filteredAxis(controller.getRawAxis(0));//TODO cfg
    	double analogY = ySpeed*filteredAxis(controller.getRawAxis(1));//TODO cfg
    	
    	double strafe = 0;
    	if(controller.getRawButton(3)) strafe += strafeSpeed;//TODO cfg
    	if(controller.getRawButton(2)) strafe -= strafeSpeed;//TODO cfg
    	
    	drive.mecanumDrive_Cartesian(strafe, analogY, analogX, 0);//TODO cfg
    }
    
    /**
     * filters out small values
     */
    private double filteredAxis(double value){
    	if(value < 0.05 && value > -0.05) value = 0; //TODO cfg
    	return value;
    }
    

    public void autonomousInit(){
    	autonomousState = 0;
    }
    
    public void autonomousPeriodic() {
    	
    	switch(autonomousState){
		case 0://move to first object
			if(!ramButton.get()){
				drive.mecanumDrive_Cartesian(0, 0.5F, 0, 0);//TODO cfg
			}else{
				autonomousState++;
				drive.stopMotor();
				timer.start();
			}
			break;//TODO 
		case 1://pick up first object
			if(!timer.hasPeriodPassed(2)){//TODO cfg
				hooks.goUp();
			}else{
				autonomousState++;
				hooks.stopMovement();
			}
			break;
		case 2://move to second object
			if(!ramButton.get()){
				drive.mecanumDrive_Cartesian(0, 0.5F, 0, 0);//TODO cfg
			}else{
				autonomousState++;
				drive.stopMotor();
				timer.reset();
			}
			break;
		case 3://pick up second object
			if(!timer.hasPeriodPassed(2)){//TODO cfg
				hooks.goUp();
			}else{
				autonomousState++;
				hooks.stopMovement();
			}
			break;
		case 4://turn towards autozone
			if(!(baseGyro.getAngle() >= 90)){
				drive.mecanumDrive_Cartesian(0, 0, 0.6, 0);//TODO cfg
			}else{
				autonomousState++;
				timer.reset();
			}
			break;
		case 5://move to autoZone
			if(!timer.hasPeriodPassed(0.9)){//TODO cfg
				drive.mecanumDrive_Cartesian(0, 0.7, 0, 0);//TODO cfg
			}else{
				autonomousState++;
				drive.stopMotor();
			}
			break;
		case 6://drop crate and can
			if(!timer.hasPeriodPassed(1.3)){
				hooks.goDown();
			}else{
				hooks.stopMovement();
				autonomousState++;
			}
			break;
		case 7://move away from crate and can
			if(!timer.hasPeriodPassed(0.6)){//TODO cfg
				drive.mecanumDrive_Cartesian(0, -0.3, 0, 0);//TODO cfg
			}else{
				autonomousState = Integer.MAX_VALUE;
				drive.stopMotor();
			}
			break;
    	}
    }
    
    
    
    
    @Override
    public void testInit(){
    	//LiveWindow.setEnabled(true); //TODO determine if necessary
    	ramButton.startLiveWindowMode();
    	hallEffect.startLiveWindowMode();
    	
    }
    
    @Override
    public void testPeriodic() {
    	
    }
    
}
